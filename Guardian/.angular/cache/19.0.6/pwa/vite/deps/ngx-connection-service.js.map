{
  "version": 3,
  "sources": ["../../../../../../node_modules/ssr-window/ssr-window.esm.js", "../../../../../../node_modules/ngx-connection-service/fesm2022/ngx-connection-service.mjs"],
  "sourcesContent": ["/**\n * SSR Window 4.0.2\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2021, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: December 13, 2021\n */\n/* eslint-disable no-param-reassign */\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object' && 'constructor' in obj && obj.constructor === Object;\n}\nfunction extend(target = {}, src = {}) {\n  Object.keys(src).forEach(key => {\n    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      extend(target[key], src[key]);\n    }\n  });\n}\nconst ssrDocument = {\n  body: {},\n  addEventListener() {},\n  removeEventListener() {},\n  activeElement: {\n    blur() {},\n    nodeName: ''\n  },\n  querySelector() {\n    return null;\n  },\n  querySelectorAll() {\n    return [];\n  },\n  getElementById() {\n    return null;\n  },\n  createEvent() {\n    return {\n      initEvent() {}\n    };\n  },\n  createElement() {\n    return {\n      children: [],\n      childNodes: [],\n      style: {},\n      setAttribute() {},\n      getElementsByTagName() {\n        return [];\n      }\n    };\n  },\n  createElementNS() {\n    return {};\n  },\n  importNode() {\n    return null;\n  },\n  location: {\n    hash: '',\n    host: '',\n    hostname: '',\n    href: '',\n    origin: '',\n    pathname: '',\n    protocol: '',\n    search: ''\n  }\n};\nfunction getDocument() {\n  const doc = typeof document !== 'undefined' ? document : {};\n  extend(doc, ssrDocument);\n  return doc;\n}\nconst ssrWindow = {\n  document: ssrDocument,\n  navigator: {\n    userAgent: ''\n  },\n  location: {\n    hash: '',\n    host: '',\n    hostname: '',\n    href: '',\n    origin: '',\n    pathname: '',\n    protocol: '',\n    search: ''\n  },\n  history: {\n    replaceState() {},\n    pushState() {},\n    go() {},\n    back() {}\n  },\n  CustomEvent: function CustomEvent() {\n    return this;\n  },\n  addEventListener() {},\n  removeEventListener() {},\n  getComputedStyle() {\n    return {\n      getPropertyValue() {\n        return '';\n      }\n    };\n  },\n  Image() {},\n  Date() {},\n  screen: {},\n  setTimeout() {},\n  clearTimeout() {},\n  matchMedia() {\n    return {};\n  },\n  requestAnimationFrame(callback) {\n    if (typeof setTimeout === 'undefined') {\n      callback();\n      return null;\n    }\n    return setTimeout(callback, 0);\n  },\n  cancelAnimationFrame(id) {\n    if (typeof setTimeout === 'undefined') {\n      return;\n    }\n    clearTimeout(id);\n  }\n};\nfunction getWindow() {\n  const win = typeof window !== 'undefined' ? window : {};\n  extend(win, ssrWindow);\n  return win;\n}\nexport { extend, getDocument, getWindow, ssrDocument, ssrWindow };", "import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { timer, fromEvent } from 'rxjs';\nimport { switchMap, retryWhen, tap, delay, debounceTime, startWith } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\nimport { getWindow } from 'ssr-window';\nconst window = getWindow();\n/**\n * InjectionToken for specifing ConnectionService options.\n */\nconst ConnectionServiceOptionsToken = new InjectionToken('ConnectionServiceOptionsToken');\nclass ConnectionService {\n  static {\n    this.DEFAULT_OPTIONS = {\n      enableHeartbeat: true,\n      heartbeatUrl: '//api.ipify.org/',\n      heartbeatInterval: 30000,\n      heartbeatRetryInterval: 1000,\n      requestMethod: 'get'\n    };\n  }\n  /**\n   * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\n   * You should use \"updateOptions\" function.\n   */\n  get options() {\n    return {\n      ...this.serviceOptions\n    };\n  }\n  constructor(http, options) {\n    this.http = http;\n    this.stateChangeEventEmitter = new EventEmitter();\n    this.currentState = {\n      hasInternetAccess: false,\n      hasNetworkConnection: window.navigator.onLine\n    };\n    this.serviceOptions = {\n      ...ConnectionService.DEFAULT_OPTIONS,\n      heartbeatExecutor: () => this.http.request(this.serviceOptions.requestMethod, this.serviceOptions.heartbeatUrl, {\n        responseType: 'text',\n        withCredentials: false\n      }),\n      ...options\n    };\n    this.checkNetworkState();\n    this.checkInternetState();\n  }\n  checkInternetState() {\n    if (this.httpSubscription) {\n      this.httpSubscription.unsubscribe();\n      this.httpSubscription = null;\n    }\n    if (this.serviceOptions.enableHeartbeat) {\n      this.httpSubscription = timer(0, this.serviceOptions.heartbeatInterval).pipe(switchMap(() => this.serviceOptions.heartbeatExecutor(this.serviceOptions)), retryWhen(errors => errors.pipe(tap(val => {\n        this.currentState.hasInternetAccess = false;\n        this.emitEvent();\n      }),\n      // restart after 5 seconds\n      delay(this.serviceOptions.heartbeatRetryInterval)))).subscribe(result => {\n        this.currentState.hasInternetAccess = true;\n        this.emitEvent();\n      });\n    } else {\n      this.currentState.hasInternetAccess = false;\n      this.emitEvent();\n    }\n  }\n  checkNetworkState() {\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\n      this.currentState.hasNetworkConnection = true;\n      this.checkInternetState();\n      this.emitEvent();\n    });\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\n      this.currentState.hasNetworkConnection = false;\n      this.currentState.hasInternetAccess = false;\n      this.checkInternetState();\n      this.emitEvent();\n    });\n  }\n  emitEvent() {\n    this.stateChangeEventEmitter.emit(this.currentState);\n  }\n  ngOnDestroy() {\n    try {\n      this.offlineSubscription.unsubscribe();\n      this.onlineSubscription.unsubscribe();\n      this.httpSubscription.unsubscribe();\n    } catch (e) {}\n  }\n  /**\n   * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\n   * function will not report current status of the connections when initially subscribed.\n   * @param reportCurrentState Report current state when initial subscription. Default is \"true\"\n   */\n  monitor(reportCurrentState = true) {\n    return reportCurrentState ? this.stateChangeEventEmitter.pipe(debounceTime(300), startWith(this.currentState)) : this.stateChangeEventEmitter.pipe(debounceTime(300));\n  }\n  /**\n   * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\n   * option values.\n   * @param options Partial option values.\n   */\n  updateOptions(options) {\n    this.serviceOptions = {\n      ...this.serviceOptions,\n      ...options\n    };\n    this.checkInternetState();\n  }\n  static {\n    this.ɵfac = function ConnectionService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ConnectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(ConnectionServiceOptionsToken, 8));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ConnectionService,\n      factory: ConnectionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConnectionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1.HttpClient\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [ConnectionServiceOptionsToken]\n    }, {\n      type: Optional\n    }]\n  }], null);\n})();\nclass ConnectionServiceModule {\n  static {\n    this.ɵfac = function ConnectionServiceModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ConnectionServiceModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ConnectionServiceModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [ConnectionService, provideHttpClient(withInterceptorsFromDi())]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConnectionServiceModule, [{\n    type: NgModule,\n    args: [{\n      providers: [ConnectionService, provideHttpClient(withInterceptorsFromDi())]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of connection-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ConnectionService, ConnectionServiceModule, ConnectionServiceOptionsToken };\n"],
  "mappings": "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",
  "names": ["window"]
}
